directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
type Address {
  street: String
  city: String
  state: String
  zipCode: String
}

input AddressInput {
  street: String
  city: String
  state: String
  zipCode: String
}

type CreditCard {
  network: String!
  number: String!
}

input CreditCardInput {
  network: String!
  number: String!
}

type Customer {
  _id: ID!
  lastName: String!
  firstName: String!
  creditCard: CreditCard!
  address: Address!
  telephone: String!
  _ts: Long!
}

input CustomerInput {
  firstName: String!
  lastName: String!
  address: AddressInput!
  telephone: String!
  creditCard: CreditCardInput!
}

type CustomerPage {
  data: [Customer]!
  after: String
  before: String
}

scalar Date

scalar Long

type Mutation {
  createOrder(data: OrderInput!): Order!
  deleteOrder(id: ID!): Order
  updateOrder(
    id: ID!
    data: OrderInput!
  ): Order
  updateCustomer(
    id: ID!
    data: CustomerInput!
  ): Customer
  deleteStore(id: ID!): Store
  submitOrder(customerId: ID!, products: [SubmitOrderProductInput]): Order!
  createStore(data: StoreInput!): Store!
  deleteCustomer(id: ID!): Customer
  updateStore(
    id: ID!
    data: StoreInput!
  ): Store
  createProduct(data: ProductInput!): Product!
  updateProduct(
    id: ID!
    data: ProductInput!
  ): Product
  createCustomer(data: CustomerInput!): Customer!
  deleteProduct(id: ID!): Product
}

type Order {
  shipDate: Time
  cart: [ProductCart!]!
  _id: ID!
  shipAddress: Address!
  creditCard: CreditCard!
  status: String!
  customer: Customer!
  creationDate: Time!
  _ts: Long!
}

input OrderCustomerRelation {
  create: CustomerInput
  connect: ID
}

input OrderInput {
  customer: OrderCustomerRelation
  cart: [ProductCartInput!]!
  status: String!
  creationDate: Time!
  shipDate: Time
  shipAddress: AddressInput!
  creditCard: CreditCardInput!
}

type OrderPage {
  data: [Order]!
  after: String
  before: String
}

type Product {
  name: String!
  quantity: Int!
  backorderLimit: Int!
  description: String!
  _id: ID!
  price: Float!
  store: Store!
  backordered: Boolean!
  _ts: Long!
}

type ProductCart {
  product: Product!
  quantity: Int!
  price: Float!
}

input ProductCartInput {
  product: ID!
  quantity: Int!
  price: Float!
}

input ProductCartProductRelation {
  create: ProductInput
  connect: ID
}

input ProductInput {
  name: String!
  description: String!
  price: Float!
  store: ProductStoreRelation
  quantity: Int!
  backorderLimit: Int!
  backordered: Boolean!
}

type ProductPage {
  data: [Product]!
  after: String
  before: String
}

input ProductStoreRelation {
  create: StoreInput
  connect: ID
}

type Query {
  findProductByID(id: ID!): Product
  findOrderByID(id: ID!): Order
  allCustomers(
    _size: Int
    _cursor: String
  ): CustomerPage!
  allProducts(
    _size: Int
    _cursor: String
  ): ProductPage!
  allStores(
    _size: Int
    _cursor: String
  ): StorePage!
  allOrders(
    _size: Int
    _cursor: String
  ): OrderPage!
  findStoreByID(id: ID!): Store
  findCustomerByID(id: ID!): Customer
}

type Store {
  _id: ID!
  _ts: Long!
  name: String!
  address: Address
}

input StoreInput {
  name: String!
  address: AddressInput
}

type StorePage {
  data: [Store]!
  after: String
  before: String
}

input SubmitOrderProductInput {
  productId: ID!
  quantity: Int!
}

scalar Time

